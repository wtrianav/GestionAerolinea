
package View;

import Classes.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import Controller.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.util.CellRangeAddress;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author wtrianav
 */
public class FrmManage extends JFrame {
    /*
    Lista donde se almacenarán los objetos de tipo client, agent y flight que se creen en el formulario
    destinado para ese fin.
    */
    List<Client> listClients = new ArrayList<>();
    List<Agent> listAgents = new ArrayList<>();
    List<Flight> listFlights = new ArrayList<>();
    
    //Estos atributos representan las conexiones desde la capa View (vista) hacia la capa Controller (controladora).
    CtlClient ctlClient;
    CtlAgent ctlAgent;
    CtlFlight ctlFlight;
    CtlReport ctlReport;
    
    //Atributo que representa la creación de la Tabla.
    DefaultTableModel tablemodelClient;
    DefaultTableModel tablemodelAgent;
    DefaultTableModel tablemodelFlight;

    /**
     * Creates new form frmPerson
     */
    public FrmManage() {
        initComponents();
        
        //Se instancian los objetos por medio de los cuales se tiene acceso oficial a la capa controladora.
        ctlClient = new CtlClient();
        ctlAgent = new CtlAgent(); 
        ctlFlight = new CtlFlight();
        ctlReport = new CtlReport();
        
        //Objeto con el que se crea la tabla (tableAgent)
        tablemodelClient = (DefaultTableModel) tableClient.getModel();
        tablemodelAgent = (DefaultTableModel) tableAgent.getModel();
        tablemodelFlight = (DefaultTableModel) tableFlight.getModel();
                
        //Esta linea le indica al formulario que NO permita el redimensionamiento del mismo
        this.setResizable(false);
        
        //Indica el título que tendrá nuestra aplicación y que será visible en el formulario
        this.setTitle("GESTIÓN DE RESERVAS - VIRGIN AIRLINES");
        
        //Indica que en el inicio de nuestra aplicación, el formulario se despliegue justo en la mitad de la pantalla
        this.setLocationRelativeTo(this);
        
        //Indica que se ejecute el método read para Agentes, Clientes y Vuelos. 
        this.refreshListAgents();
        this.refreshListClients();
        this.refreshListFlights();
        
        //Indica que se ejecute el método para mostar el gráfico de personas, Clientes y Vuelos.
        this.generateGraphicPerson();
        this.generateGraphicClient();
        this.generateGraphicFlight();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JTabbedPane = new javax.swing.JTabbedPane();
        PanelManageAgents = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtNameAgent = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtLastNameAgent = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtIdAgent = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCodeAgent = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        ButtonCreateAgent = new javax.swing.JButton();
        ButtonSearchAgent = new javax.swing.JButton();
        ButtonUpdateAgent = new javax.swing.JButton();
        ButtonDeleteAgent = new javax.swing.JButton();
        cmbxPosition = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        txtPhoneNumberAgent = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableAgent = new javax.swing.JTable();
        ButtonExportAgents = new javax.swing.JButton();
        labelQuantityAgents = new javax.swing.JLabel();
        PanelManageClients = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNameClient = new javax.swing.JTextField();
        txtIdClient = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAddressClient = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPhoneNumberClient = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtEmailClient = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPassportClient = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtLastNameClient = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ButtonCreateClient = new javax.swing.JButton();
        ButtonSearchClient = new javax.swing.JButton();
        ButtonUpdateClient = new javax.swing.JButton();
        ButtonDeleteClient = new javax.swing.JButton();
        cmbxType = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableClient = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        txtCodeClient = new javax.swing.JTextField();
        ButtonExportClients = new javax.swing.JButton();
        labelQuantityClients = new javax.swing.JLabel();
        PanelManageFlights = new javax.swing.JPanel();
        ButtonCreateFlight = new javax.swing.JButton();
        ButtonSearchFlight = new javax.swing.JButton();
        ButtonUpdateFlight = new javax.swing.JButton();
        ButtonDeleteFlight = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtCodeFlight = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtOriginFlight = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtDestinationFlight = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtDepartureTimeFlight = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtArrivalTimeFlight = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cmbxTypeFlight = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableFlight = new javax.swing.JTable();
        ButtonExportFlights = new javax.swing.JButton();
        labelQuantityFlights = new javax.swing.JLabel();
        PanelGraphicPersons = new javax.swing.JPanel();
        PanelGraphicClients = new javax.swing.JPanel();
        PanelGraphicFlights = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel9.setText("Nombre:");

        jLabel10.setText("Apellido:");

        jLabel11.setText("Cédula:");

        jLabel12.setText("Código:");

        jLabel13.setText("Cargo:");

        ButtonCreateAgent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Create.png"))); // NOI18N
        ButtonCreateAgent.setText("Crear");
        ButtonCreateAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateAgentActionPerformed(evt);
            }
        });

        ButtonSearchAgent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Search.png"))); // NOI18N
        ButtonSearchAgent.setText("Buscar");
        ButtonSearchAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchAgentActionPerformed(evt);
            }
        });

        ButtonUpdateAgent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Update.png"))); // NOI18N
        ButtonUpdateAgent.setText("Actualizar");
        ButtonUpdateAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUpdateAgentActionPerformed(evt);
            }
        });

        ButtonDeleteAgent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Delete.png"))); // NOI18N
        ButtonDeleteAgent.setText("Eliminar");
        ButtonDeleteAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteAgentActionPerformed(evt);
            }
        });

        cmbxPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Asesor Administrativo", "Asesor Comercial", "Coordinador" }));

        jLabel20.setText("Teléfono:");

        tableAgent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Cédula", "Teléfono", "Código", "Cargo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableAgent);

        ButtonExportAgents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Export.png"))); // NOI18N
        ButtonExportAgents.setText("Exportar");
        ButtonExportAgents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExportAgentsActionPerformed(evt);
            }
        });

        labelQuantityAgents.setText("jLabel22");

        javax.swing.GroupLayout PanelManageAgentsLayout = new javax.swing.GroupLayout(PanelManageAgents);
        PanelManageAgents.setLayout(PanelManageAgentsLayout);
        PanelManageAgentsLayout.setHorizontalGroup(
            PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
            .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                        .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageAgentsLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(8, 8, 8)))
                        .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtPhoneNumberAgent)
                            .addComponent(txtNameAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(104, 104, 104)
                        .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLastNameAgent)
                            .addComponent(txtCodeAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                        .addComponent(ButtonCreateAgent)
                        .addGap(70, 70, 70)
                        .addComponent(ButtonSearchAgent)
                        .addGap(70, 70, 70)
                        .addComponent(ButtonUpdateAgent)))
                .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(ButtonDeleteAgent)
                        .addContainerGap(144, Short.MAX_VALUE))
                    .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(8, 8, 8)
                        .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIdAgent)
                            .addComponent(cmbxPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageAgentsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(labelQuantityAgents)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonExportAgents)
                .addGap(381, 381, 381))
        );
        PanelManageAgentsLayout.setVerticalGroup(
            PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelManageAgentsLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtNameAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastNameAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtIdAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(12, 12, 12)
                .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtPhoneNumberAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodeAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(cmbxPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonDeleteAgent)
                    .addComponent(ButtonUpdateAgent)
                    .addComponent(ButtonSearchAgent)
                    .addComponent(ButtonCreateAgent))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelManageAgentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonExportAgents)
                    .addComponent(labelQuantityAgents))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        JTabbedPane.addTab("Gestión de Agentes", PanelManageAgents);

        jLabel5.setText("Cédula:");

        jLabel1.setText("Nombre:");

        jLabel3.setText("Dirección:");

        jLabel6.setText("Teléfono:");

        jLabel4.setText("Email:");

        jLabel7.setText("Pasaporte:");

        jLabel8.setText("Tipo:");

        jLabel2.setText("Apellido:");

        ButtonCreateClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Create.png"))); // NOI18N
        ButtonCreateClient.setText("Crear");
        ButtonCreateClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateClientActionPerformed(evt);
            }
        });

        ButtonSearchClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Search.png"))); // NOI18N
        ButtonSearchClient.setText("Buscar");
        ButtonSearchClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchClientActionPerformed(evt);
            }
        });

        ButtonUpdateClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Update.png"))); // NOI18N
        ButtonUpdateClient.setText("Actualizar");
        ButtonUpdateClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUpdateClientActionPerformed(evt);
            }
        });

        ButtonDeleteClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Delete.png"))); // NOI18N
        ButtonDeleteClient.setText("Eliminar");
        ButtonDeleteClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteClientActionPerformed(evt);
            }
        });

        cmbxType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Plata", "Oro", "Platino", "Esmeralda", "Diamante" }));

        tableClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Cédula", "Dirección", "Teléfono", "Email", "Pasaporte", "Tipo", "Código"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableClient);

        jLabel21.setText("Código:");

        ButtonExportClients.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Export.png"))); // NOI18N
        ButtonExportClients.setText("Exportar");
        ButtonExportClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExportClientsActionPerformed(evt);
            }
        });

        labelQuantityClients.setText("jLabel22");

        javax.swing.GroupLayout PanelManageClientsLayout = new javax.swing.GroupLayout(PanelManageClients);
        PanelManageClients.setLayout(PanelManageClientsLayout);
        PanelManageClientsLayout.setHorizontalGroup(
            PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelManageClientsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelManageClientsLayout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageClientsLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelManageClientsLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNameClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelManageClientsLayout.createSequentialGroup()
                                .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageClientsLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(6, 6, 6))
                                    .addGroup(PanelManageClientsLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtAddressClient)
                                    .addComponent(txtPassportClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageClientsLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(2, 2, 2)
                                .addComponent(txtPhoneNumberClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageClientsLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(4, 4, 4)
                                .addComponent(cmbxType, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageClientsLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLastNameClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(97, 97, 97)
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelManageClientsLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel5))
                            .addComponent(jLabel21)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIdClient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(txtEmailClient, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCodeClient, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(28, 28, 28))))
            .addGroup(PanelManageClientsLayout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(ButtonCreateClient)
                .addGap(70, 70, 70)
                .addComponent(ButtonSearchClient)
                .addGap(70, 70, 70)
                .addComponent(ButtonUpdateClient)
                .addGap(70, 70, 70)
                .addComponent(ButtonDeleteClient)
                .addGap(0, 145, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageClientsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(labelQuantityClients)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonExportClients)
                .addGap(381, 381, 381))
        );
        PanelManageClientsLayout.setVerticalGroup(
            PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelManageClientsLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNameClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastNameClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(txtIdClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelManageClientsLayout.createSequentialGroup()
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhoneNumberClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(txtEmailClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtCodeClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21)))
                    .addGroup(PanelManageClientsLayout.createSequentialGroup()
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAddressClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPassportClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addGap(29, 29, 29)
                .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonDeleteClient)
                    .addComponent(ButtonUpdateClient)
                    .addComponent(ButtonSearchClient)
                    .addComponent(ButtonCreateClient))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelManageClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonExportClients)
                    .addComponent(labelQuantityClients))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        JTabbedPane.addTab("Gestión de Clientes", PanelManageClients);

        ButtonCreateFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Create.png"))); // NOI18N
        ButtonCreateFlight.setText("Crear");
        ButtonCreateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateFlightActionPerformed(evt);
            }
        });

        ButtonSearchFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Search.png"))); // NOI18N
        ButtonSearchFlight.setText("Buscar");
        ButtonSearchFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchFlightActionPerformed(evt);
            }
        });

        ButtonUpdateFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Update.png"))); // NOI18N
        ButtonUpdateFlight.setText("Actualizar");
        ButtonUpdateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUpdateFlightActionPerformed(evt);
            }
        });

        ButtonDeleteFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Delete.png"))); // NOI18N
        ButtonDeleteFlight.setText("Eliminar");
        ButtonDeleteFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteFlightActionPerformed(evt);
            }
        });

        jLabel14.setText("Código:");

        jLabel15.setText("Origen:");

        jLabel16.setText("Destino:");

        jLabel17.setText("Hora de Salida:");

        jLabel18.setText("Hora de llegada:");

        jLabel19.setText("Tipo:");

        cmbxTypeFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Regular", "Charter", "Low Cost", "Non Stop", "Directo", "One Way", "Nacional", "Internacional", "Intercontinental" }));

        tableFlight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origen", "Destino", "Tipo", "Hora de Salida", "Hora de Llegada", "Código"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tableFlight);

        ButtonExportFlights.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Export.png"))); // NOI18N
        ButtonExportFlights.setText("Exportar");
        ButtonExportFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExportFlightsActionPerformed(evt);
            }
        });

        labelQuantityFlights.setText("jLabel23");

        javax.swing.GroupLayout PanelManageFlightsLayout = new javax.swing.GroupLayout(PanelManageFlights);
        PanelManageFlights.setLayout(PanelManageFlightsLayout);
        PanelManageFlightsLayout.setHorizontalGroup(
            PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageFlightsLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOriginFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDepartureTimeFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtArrivalTimeFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDestinationFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(92, 92, 92)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtCodeFlight)
                    .addComponent(cmbxTypeFlight, 0, 150, Short.MAX_VALUE))
                .addGap(31, 31, 31))
            .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
            .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(ButtonCreateFlight)
                        .addGap(70, 70, 70)
                        .addComponent(ButtonSearchFlight)
                        .addGap(70, 70, 70)
                        .addComponent(ButtonUpdateFlight)
                        .addGap(70, 70, 70)
                        .addComponent(ButtonDeleteFlight))
                    .addGroup(PanelManageFlightsLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(labelQuantityFlights)
                        .addGap(308, 308, 308)
                        .addComponent(ButtonExportFlights)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelManageFlightsLayout.setVerticalGroup(
            PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelManageFlightsLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(cmbxTypeFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(txtDestinationFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtOriginFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtCodeFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(txtArrivalTimeFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txtDepartureTimeFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonDeleteFlight)
                    .addComponent(ButtonUpdateFlight)
                    .addComponent(ButtonSearchFlight)
                    .addComponent(ButtonCreateFlight))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelManageFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonExportFlights)
                    .addComponent(labelQuantityFlights))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        JTabbedPane.addTab("Gestión de vuelos", PanelManageFlights);

        javax.swing.GroupLayout PanelGraphicPersonsLayout = new javax.swing.GroupLayout(PanelGraphicPersons);
        PanelGraphicPersons.setLayout(PanelGraphicPersonsLayout);
        PanelGraphicPersonsLayout.setHorizontalGroup(
            PanelGraphicPersonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 857, Short.MAX_VALUE)
        );
        PanelGraphicPersonsLayout.setVerticalGroup(
            PanelGraphicPersonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 477, Short.MAX_VALUE)
        );

        JTabbedPane.addTab("Gráfico Personas", PanelGraphicPersons);

        javax.swing.GroupLayout PanelGraphicClientsLayout = new javax.swing.GroupLayout(PanelGraphicClients);
        PanelGraphicClients.setLayout(PanelGraphicClientsLayout);
        PanelGraphicClientsLayout.setHorizontalGroup(
            PanelGraphicClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 857, Short.MAX_VALUE)
        );
        PanelGraphicClientsLayout.setVerticalGroup(
            PanelGraphicClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 477, Short.MAX_VALUE)
        );

        JTabbedPane.addTab("Gráfico Clientes", PanelGraphicClients);

        javax.swing.GroupLayout PanelGraphicFlightsLayout = new javax.swing.GroupLayout(PanelGraphicFlights);
        PanelGraphicFlights.setLayout(PanelGraphicFlightsLayout);
        PanelGraphicFlightsLayout.setHorizontalGroup(
            PanelGraphicFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 857, Short.MAX_VALUE)
        );
        PanelGraphicFlightsLayout.setVerticalGroup(
            PanelGraphicFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 477, Short.MAX_VALUE)
        );

        JTabbedPane.addTab("Gráfico Vuelos", PanelGraphicFlights);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(JTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonSearchClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchClientActionPerformed
        // Se valida que sí haya un valor en el campo código del formulario.
        if (txtIdClient.getText().length() > 0) {
            //Accedo al valor de ese código por el que se pretende buscar al cliente.
            String cedula = txtIdClient.getText();
            Client client = ctlClient.read(cedula);
            
            if (client !=null) {
                    
                    this.cleanFieldsClients();
                    
                    txtNameClient.setText(client.getName());
                    txtLastNameClient.setText(client.getLastName());
                    txtIdClient.setText(client.getId());
                    txtCodeClient.setText("" + client.getCode());
                    txtPhoneNumberClient.setText(client.getPhoneNumber());
                    txtAddressClient.setText(client.getAddress());
                    txtPassportClient.setText(client.getPassport());
                    txtEmailClient.setText(client.getEmail());
                    cmbxType.setSelectedItem(client.getType());
            } else {
                JOptionPane.showMessageDialog(null, "El cliente con la cédula " + cedula + " NO existe");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor ingrese la cédula del cliente a buscar");
        }  
    }//GEN-LAST:event_ButtonSearchClientActionPerformed
    
    /*
    * Al ser invocado, cambia los valores de las cajas de texto por una cadena vacía
    * Para que el formulario quede listo para ser nuevamente diligenciado para la creación de más elementos (clientes)
    */
    public void cleanFieldsClients() {
        
        txtNameClient.setText("");
        txtLastNameClient.setText("");
        txtIdClient.setText(""); 
        txtAddressClient.setText("");
        txtPhoneNumberClient.setText("");
        txtEmailClient.setText("");
        txtPassportClient.setText("");
        cmbxType.setSelectedIndex(0);
        txtCodeClient.setText("");

    }
    
    //Método que se encarga de actualizar la lista del tab lista de Clientes
    public void refreshListClients() {
        //Se define un modelo de Tabla para almacenar los datos a listar en la tabla tableClient
        tablemodelClient.setRowCount(0);
        
        Object[] rowdata = new Object [9];
        listClients = ctlClient.read();
        labelQuantityClients.setText("Total clientes: " + listClients.size());
        
        for(int i=0; i <listClients.size(); i++) {
            
            rowdata[0] = listClients.get(i).getName();
            rowdata[1] = listClients.get(i).getLastName();
            rowdata[2] = listClients.get(i).getId();
            rowdata[3] = listClients.get(i).getAddress();
            rowdata[4] = listClients.get(i).getPhoneNumber();
            rowdata[5] = listClients.get(i).getEmail();
            rowdata[6] = listClients.get(i).getPassport();
            rowdata[7] = listClients.get(i).getType();
            rowdata[8] = listClients.get(i).getCode();
            

            tablemodelClient.addRow(rowdata);
        }
        
        //El modelo es enviado al elemento tableClient.
        tableClient.setModel(tablemodelClient);
    }
    
    public void readClients() {
        //Se define un modelo de Tabla para almacenar los datos a listar en la tabla tableAgent
        tablemodelClient.setRowCount(0);
        
        Object[] rowdata = new Object [9];
        
        List<Client> listClients = new ArrayList<>();
        listClients = ctlClient.read();
        
        for(int i=0; i < listClients.size(); i++) {
            
            rowdata[0] = listClients.get(i).getName();
            rowdata[1] = listClients.get(i).getLastName();
            rowdata[2] = listClients.get(i).getId();
            rowdata[3] = listClients.get(i).getAddress();
            rowdata[4] = listClients.get(i).getPhoneNumber();
            rowdata[5] = listClients.get(i).getEmail();
            rowdata[6] = listClients.get(i).getPassport();
            rowdata[7] = listClients.get(i).getType();
            rowdata[8] = listClients.get(i).getCode();
            
            tablemodelClient.addRow(rowdata);
        }
        
        //El modelo es enviado al elemento tableAgent.
        tableClient.setModel(tablemodelClient);
    }
    
    
    private void ButtonUpdateClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUpdateClientActionPerformed
        
        if (txtIdClient.getText().length() > 0) {
            String cedula = txtIdClient.getText();

            //Por medio del método .getText(), accedemos al valor que se tenga en la caja de texto seleccionada.
            String name = txtNameClient.getText();
            String lastName = txtLastNameClient.getText();
            int code = Integer.parseInt(txtCodeClient.getText());
            String phoneNumber = txtPhoneNumberClient.getText();
            String address = txtAddressClient.getText();
            String email = txtEmailClient.getText();
            String passport = txtPassportClient.getText();
            //Se accede al valor seleccionado del ComboBox de Tipo.
            String type = cmbxType.getSelectedItem().toString();
            
            //Se invoca a la capa controladora para realizar la actualización del cliente
            boolean updated = ctlClient.update(code, address, email, passport, type, cedula, name, lastName, phoneNumber);

            if (updated) {
                JOptionPane.showMessageDialog(null, "El cliente ha sido actualizado correctamente.");

                this.cleanFieldsClients();
                this.refreshListClients();

            } else {
                JOptionPane.showMessageDialog(null, "El cliente NO se ha actualizado correctamente, inténtelo de nuevo.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Por favor ingrese la cédula del cliente a actualizar.");
        }

    }//GEN-LAST:event_ButtonUpdateClientActionPerformed

    /*
    * Al ser invocado, cambia los valores de las cajas de texto por una cadena vacía
    * Para que el formulario quede listo para ser nuevamente diligenciado para la creación de más elementos (agentes)
    */
    public void cleanFieldsAgents() {
        txtNameAgent.setText("");
        txtLastNameAgent.setText("");
        txtIdAgent.setText("");
        txtPhoneNumberAgent.setText("");
        txtCodeAgent.setText("");
        cmbxPosition.setSelectedIndex(0);
    }
    
    //Método que se encarga de actualizar la lista del tab lista de Agentes
    public void refreshListAgents() {
        //Se define un modelo de Tabla para almacenar los datos a listar en la tabla tableAgent
        //Esta línea de código setea la tabla para que no aparezcan resgistros.
        tablemodelAgent.setRowCount(0);
        
        Object[] rowdata = new Object [6];
        listAgents = ctlAgent.read();
        labelQuantityAgents.setText("Total agentes: " + listAgents.size());
        
        for(int i=0; i <listAgents.size(); i++) {
            
            rowdata[0] = listAgents.get(i).getName();
            rowdata[1] = listAgents.get(i).getLastName();
            rowdata[2] = listAgents.get(i).getId();
            rowdata[3] = listAgents.get(i).getPhoneNumber();
            rowdata[4] = Integer.toString(listAgents.get(i).getCode());
            rowdata[5] = listAgents.get(i).getPosition();
            
            tablemodelAgent.addRow(rowdata);
        }
        
        //El modelo es enviado al elemento tableAgent.
        tableAgent.setModel(tablemodelAgent);
    }
    
    public void readAgents() {
        //Se define un modelo de Tabla para almacenar los datos a listar en la tabla tableAgent
        tablemodelAgent.setRowCount(0);
        
        Object[] rowdata = new Object [6];
        
        List<Agent> listAgents = new ArrayList<>();
        listAgents = ctlAgent.read();
        
        for(int i=0; i <listAgents.size(); i++) {
            
            rowdata[0] = listAgents.get(i).getName();
            rowdata[1] = listAgents.get(i).getLastName();
            rowdata[2] = listAgents.get(i).getId();
            rowdata[3] = listAgents.get(i).getPhoneNumber();
            rowdata[4] = Integer.toString(listAgents.get(i).getCode());
            rowdata[5] = listAgents.get(i).getPosition();
            
            tablemodelAgent.addRow(rowdata);
        }
        
        //El modelo es enviado al elemento tableAgent.
        tableAgent.setModel(tablemodelAgent);
    }  
    
    private void generateGraphicPerson() {
        List<ClassReports> listReport = ctlReport.ListByPersonType();
        
        DefaultPieDataset piechart = new DefaultPieDataset();
        for (ClassReports report : listReport) {
            piechart.setValue(report.getType(), report.getQuantity());
        }
        
        JFreeChart graphic = ChartFactory.createPieChart3D("Clients vs Agents", piechart);
        PiePlot3D plot = (PiePlot3D) graphic.getPlot();
        plot.setForegroundAlpha(0.5f);
        plot.setSectionPaint("Clientes", Color.ORANGE);
        plot.setSectionPaint("Agentes", Color.GREEN);
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}({1})"));

        ChartPanel chartpanel = new ChartPanel(graphic);
        chartpanel.setMouseWheelEnabled(true);
        
        PanelGraphicPersons.setLayout(new BorderLayout());
        PanelGraphicPersons.add(chartpanel, BorderLayout.CENTER);
        PanelGraphicPersons.validate();
    }
    
    private void generateGraphicClient() {
        List<ClassReports> listReportClient = ctlReport.ListByClientType();
        
        DefaultCategoryDataset barchart = new DefaultCategoryDataset();
        for (ClassReports report : listReportClient) {
            barchart.setValue(report.getQuantity(), "Tipo de Cliente", report.getType());
        }
        
        JFreeChart graphic = ChartFactory.createBarChart3D("Clientes por tipo", "Tipo", "Cantidad", barchart, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel panel = new ChartPanel(graphic);
        //panel.setMouseWheelEnabled(true); //Para darle movimiento a la gráfica con el scroll del mouse.

        PanelGraphicClients.setLayout(new BorderLayout());
        PanelGraphicClients.add(panel, BorderLayout.CENTER);
        PanelGraphicClients.validate();
        
    }
    
        private void generateGraphicFlight() {
        List<ClassReports> listReportFlight = ctlReport.ListByFlightType();
        
        DefaultCategoryDataset barchart = new DefaultCategoryDataset();
        for (ClassReports report : listReportFlight) {
            barchart.setValue(report.getQuantity(), "Tipo de Vuelo", report.getType());
        }
        
        JFreeChart graphic = ChartFactory.createBarChart3D("Vuelos por tipo", "Tipo", "Cantidad", barchart, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel panel = new ChartPanel(graphic);
        //panel.setMouseWheelEnabled(true); //Para darle movimiento a la gráfica con el scroll del mouse.

        PanelGraphicFlights.setLayout(new BorderLayout());
        PanelGraphicFlights.add(panel, BorderLayout.CENTER);
        PanelGraphicFlights.validate();
        
    }
    
    private void ButtonSearchFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchFlightActionPerformed

        // Se valida que sí haya un valor en el campo código del formulario.
        if (txtCodeFlight.getText().length() > 0) {
            //Accedo al valor de ese código por el que se pretende buscar al cliente.
            String codigo = txtCodeFlight.getText();
            Flight flight = ctlFlight.read(codigo);
            
            if (flight !=null) {
                    
                    this.cleanFieldsFlights();
                    
                    txtCodeFlight.setText(String.valueOf(flight.getCode()));
                    txtOriginFlight.setText(flight.getOrigin());
                    txtDestinationFlight.setText(flight.getDestination());
                    txtDepartureTimeFlight.setText(flight.getDepartureTime());
                    txtArrivalTimeFlight.setText(flight.getArrivalTime());
                    cmbxTypeFlight.setSelectedItem(flight.getType());
                    
            } else {
                JOptionPane.showMessageDialog(null, "El vuelo con el código " + codigo + " NO existe");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor ingrese el código del vuelo a buscar");
        } 
    }//GEN-LAST:event_ButtonSearchFlightActionPerformed

        /*
    * Al ser invocado, cambia los valores de las cajas de texto por una cadena vacía
    * Para que el formulario quede listo para ser nuevamente diligenciado para la creación de más elementos (agentes)
    */
    public void cleanFieldsFlights() {
        txtCodeFlight.setText("");
        txtOriginFlight.setText("");
        txtDestinationFlight.setText("");
        txtDepartureTimeFlight.setText("");
        txtArrivalTimeFlight.setText("");
        cmbxTypeFlight.setSelectedIndex(0);
        
    }
    
    //Método que se encarga de actualizar la lista del tab lista de Agentes
    public void refreshListFlights() {
        //Se define un modelo de Tabla para almacenar los datos a listar en la tabla tableClient
        tablemodelFlight.setRowCount(0);
        
        Object[] rowdata = new Object [6];
        listFlights = ctlFlight.read();
        labelQuantityFlights.setText("Total vuelos: " + listFlights.size());
        
        for(int i=0; i <listFlights.size(); i++) {
            
            rowdata[0] = listFlights.get(i).getOrigin();
            rowdata[1] = listFlights.get(i).getDestination();
            rowdata[2] = listFlights.get(i).getType();
            rowdata[3] = listFlights.get(i).getDepartureTime();
            rowdata[4] = listFlights.get(i).getArrivalTime();
            rowdata[5] = listFlights.get(i).getCode();

            tablemodelFlight.addRow(rowdata);
        }
        
        //El modelo es enviado al elemento tableClient.
        tableFlight.setModel(tablemodelFlight);
    }
    
    public void readFlights() {
        //Se define un modelo de Tabla para almacenar los datos a listar en la tabla tableAgent
        tablemodelFlight.setRowCount(0);
        
        Object[] rowdata = new Object [9];
        
        List<Flight> listFlights = new ArrayList<>();
        listFlights = ctlFlight.read();
        
        for(int i=0; i <listFlights.size(); i++) {
            
            rowdata[0] = listFlights.get(i).getOrigin();
            rowdata[1] = listFlights.get(i).getDestination();
            rowdata[2] = listFlights.get(i).getType();
            rowdata[3] = listFlights.get(i).getDepartureTime();
            rowdata[4] = listFlights.get(i).getArrivalTime();
            rowdata[5] = listFlights.get(i).getCode();
            
            tablemodelFlight.addRow(rowdata);
        }
        
        //El modelo es enviado al elemento tableAgent.
        tableFlight.setModel(tablemodelFlight);
    }
     
    private void ButtonUpdateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUpdateFlightActionPerformed
        
            if (txtCodeFlight.getText().length() > 0) {
            String codigo = txtCodeFlight.getText();

            //Por medio del método .getText(), accedemos al valor que se tenga en la caja de texto seleccionada.
            String origin = txtOriginFlight.getText();
            String destination = txtDestinationFlight.getText();
            String departureTime = txtDepartureTimeFlight.getText();
            String arrivalTime = txtArrivalTimeFlight.getText();
            //Se accede al valor seleccionado del ComboBox de Tipo.
            String type = cmbxTypeFlight.getSelectedItem().toString();
            

            //Se invoca a la capa controladora para realizar la actualización del cliente
            boolean updated = ctlFlight.update(codigo, origin, destination, departureTime, arrivalTime, type);

            if (updated) {
                JOptionPane.showMessageDialog(null, "El vuelo ha sido actualizado correctamente.");

                this.cleanFieldsFlights();
                this.refreshListFlights();

            } else {
                JOptionPane.showMessageDialog(null, "El vuelo NO se ha actualizado correctamente, inténtelo de nuevo.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Por favor ingrese el código del vuelo a actualizar.");
        }
    }//GEN-LAST:event_ButtonUpdateFlightActionPerformed

    private void ButtonCreateClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateClientActionPerformed
        //Por medio del método .getText(), accedemos al valor que se tenga en la caja de texto seleccionada.
        String id = txtIdClient.getText();
        String name = txtNameClient.getText();
        String lastName = txtLastNameClient.getText();     
        String phoneNumber = txtPhoneNumberClient.getText();
        int code = Integer.parseInt(txtCodeClient.getText());
        String address = txtAddressClient.getText();
        String email = txtEmailClient.getText();
        String passport = txtPassportClient.getText();
        //Se accede al valor seleccionado del ComboBox de Tipo.
        String type = cmbxType.getSelectedItem().toString();
                
        //Se invoca a la capa controladora para realizar la creación del cliente
        boolean created = ctlClient.create(code, address, email, passport, type, id, name, lastName, phoneNumber, listClients);
        if (created){
            JOptionPane.showMessageDialog(null, "El cliente ha sido creado exitosamente.");
        }

        this.cleanFieldsClients();
        this.refreshListClients();
        
    }//GEN-LAST:event_ButtonCreateClientActionPerformed

    private void ButtonDeleteClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteClientActionPerformed
        
        if (txtIdClient.getText().length() > 0) {
            String id = txtIdClient.getText();
            boolean deleted = ctlClient.delete(id);
            
            if (deleted) {
                JOptionPane.showMessageDialog(null, "El cliente fue eliminado satisfactoriamente!!!");
            } else {
                JOptionPane.showMessageDialog(null, "El cliente NO ha sido eliminado");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor digite el número de cédula del cliente que desea eliminar");
        }
        
        this.cleanFieldsClients();
        this.refreshListClients();
    }//GEN-LAST:event_ButtonDeleteClientActionPerformed

    private void ButtonDeleteFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteFlightActionPerformed
        
        if (txtCodeFlight.getText().length() > 0) {
            String code = txtCodeFlight.getText();
            
            boolean deleted = ctlFlight.delete(code);
            
            if (deleted) {
                JOptionPane.showMessageDialog(null, "El vuelo fue eliminado satisfactoriamente!!!");
            } else {
                JOptionPane.showMessageDialog(null, "El vuelo NO ha sido eliminado");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor digite el número de código del vuelo que desea eliminar");
        }
        
        this.cleanFieldsFlights();
        this.refreshListFlights(); 
    }//GEN-LAST:event_ButtonDeleteFlightActionPerformed

    private void ButtonCreateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateFlightActionPerformed
        
        //Por medio del método .getText(), accedemos al valor que se tenga en la caja de texto seleccionada.
        String code = txtCodeFlight.getText();
        String origin = txtOriginFlight.getText();
        String destination = txtDestinationFlight.getText();
        String departureTime = txtDepartureTimeFlight.getText();
        String arrivalTime = txtArrivalTimeFlight.getText();
        //Se accede al valor seleccionado del ComboBox de Tipo.
        String type = cmbxTypeFlight.getSelectedItem().toString();
                
        //Se invoca a la capa controladora para realizar la creación del cliente
        boolean created = ctlFlight.create(code, origin, destination, departureTime, arrivalTime, type, listFlights);
        if (created){
            JOptionPane.showMessageDialog(null, "El vuelo " + code + " con destino a " + destination + " ha sido creado exitosamente.");
        }

        this.cleanFieldsFlights();
        this.refreshListFlights();
        
    }//GEN-LAST:event_ButtonCreateFlightActionPerformed

    private void ButtonDeleteAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteAgentActionPerformed
        // TODO add your handling code here:
        if (txtIdAgent.getText().length() > 0) {
            String id = txtIdAgent.getText();
            boolean deleted = ctlAgent.delete(id);

            if (deleted) {
                JOptionPane.showMessageDialog(null, "El agente fue eliminado satisfactoriamente!!!");
            } else {
                JOptionPane.showMessageDialog(null, "El agente NO ha sido eliminado");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor digite el número de cédula del agente que desea eliminar");
        }

        this.cleanFieldsAgents();
        this.refreshListAgents();
    }//GEN-LAST:event_ButtonDeleteAgentActionPerformed

    private void ButtonUpdateAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUpdateAgentActionPerformed

        if (txtIdAgent.getText().length() > 0) {
            String cedula = txtIdAgent.getText();

            //Por medio del método .getText(), accedemos al valor que se tenga en la caja de texto seleccionada.
            String name = txtNameAgent.getText();
            String lastName = txtLastNameAgent.getText();
            String phoneNumber = txtPhoneNumberAgent.getText();
            int code = Integer.parseInt(txtCodeAgent.getText());
            //Se accede al valor seleccionado del ComboBox de Tipo.
            String position = cmbxPosition.getSelectedItem().toString();

            //Se invoca a la capa controladora para realizar la actualización del agente
            boolean updated = ctlAgent.update(code, position, cedula, name, lastName, phoneNumber);

            if (updated) {
                JOptionPane.showMessageDialog(null, "El agente ha sido actualizado correctamente.");

                this.cleanFieldsAgents();
                this.refreshListAgents();

            } else {
                JOptionPane.showMessageDialog(null, "El agente NO se ha actualizado correctamente, inténtelo de nuevo.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Por favor ingrese la cédula del agente a actualizar.");
        }
    }//GEN-LAST:event_ButtonUpdateAgentActionPerformed

    private void ButtonSearchAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchAgentActionPerformed
        // Se valida que sí haya un valor en el campo código del formulario.
        if (txtIdAgent.getText().length() > 0) {
            //Accedo al valor de ese código por el que se pretende buscar al cliente.
            String cedula = txtIdAgent.getText();
            Agent agent = ctlAgent.read(cedula);

            if (agent !=null) {

                this.cleanFieldsAgents();

                txtNameAgent.setText(agent.getName());
                txtLastNameAgent.setText(agent.getLastName());
                txtIdAgent.setText(agent.getId());
                txtPhoneNumberAgent.setText(agent.getPhoneNumber());
                txtCodeAgent.setText(String.valueOf(agent.getCode()));
                cmbxPosition.setSelectedItem(agent.getPosition());
            } else {
                JOptionPane.showMessageDialog(null, "El agente con la cédula " + cedula + " NO existe");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor ingrese la cédula del agente a buscar");
        }
    }//GEN-LAST:event_ButtonSearchAgentActionPerformed

    private void ButtonCreateAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateAgentActionPerformed
        
        String name = txtNameAgent.getText();
        String lastName = txtLastNameAgent.getText();
        String id = txtIdAgent.getText();
        String phoneNumber = txtPhoneNumberAgent.getText();
        int code = Integer.parseInt(txtCodeAgent.getText());
        //Se accede al valor seleccionado del ComboBox de Tipo.
        String position = cmbxPosition.getSelectedItem().toString();
 
        //Se invoca a la capa controladora para realizar la creación del cliente
        boolean created = ctlAgent.create(code, position, id, name, lastName, phoneNumber, listAgents);

        if (created){
            JOptionPane.showMessageDialog(null, "El Agente ha sido creado exitosamente.");
        }

        this.cleanFieldsAgents();
        this.refreshListAgents();
    }//GEN-LAST:event_ButtonCreateAgentActionPerformed

    private void ButtonExportAgentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExportAgentsActionPerformed
        //Objeto que me pregunta que nombre le quiero poner al archivo y la ruta dónde deseo guardarlo.
        JFileChooser fileNameAndPath = new JFileChooser();
        fileNameAndPath.setDialogTitle("Especifique el nombre y la ruta del archivo a exportar");
        
        int selectUser = fileNameAndPath.showSaveDialog(rootPane);
        if (selectUser == JFileChooser.APPROVE_OPTION) {
            String nameFile = fileNameAndPath.getSelectedFile().getAbsolutePath();

            //Creación de libro de excel vacío por medio del objeto HSSFWorkbook.
            HSSFWorkbook book = new HSSFWorkbook();
            //A partir de la creación del libro, se crea la hoja de excel con el nombre "Agents".
            HSSFSheet sheet = book.createSheet();
            book.setSheetName(0, "Reporte de agentes");
            
            //Estilos del titulo del reporte.
            CellStyle titleStyle = book.createCellStyle();
            titleStyle.setAlignment(HorizontalAlignment.CENTER);
            titleStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            HSSFFont titleFont = book.createFont();
            titleFont.setFontName("Arial");
            titleFont.setBold(true);
            titleFont.setFontHeightInPoints((short) 12);
            titleStyle.setFont(titleFont);
            
            Row titleRow = sheet.createRow(1);
            Cell titleCell = titleRow.createCell(1);
            titleCell.setCellStyle(titleStyle);
            titleCell.setCellValue("REPORTE DE AGENTES");
            
            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 4));

            //Nombre de los encabezados (campos) que aparecerán en la hoja de excel.
            String[] headers = new String[]{"NOMBRE", "APELLIDO", "CÉDULA", "TELÉFONO", "CÓDIGO", "CARGO"};

            //Estilos de los encabezados del reporte.
            CellStyle headerCellStyle = book.createCellStyle();
            headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
            headerCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            headerCellStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            HSSFFont font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerCellStyle.setFont(font);

            //Se procesan los encabezados para agregarlos en una fila.
            HSSFRow headersFRow = sheet.createRow(4);
            for (int i = 0; i < headers.length; i++) {
                String header = headers[i];
                HSSFCell cell = headersFRow.createCell(i);
                cell.setCellStyle(headerCellStyle);
                cell.setCellValue(header);
            }

            //Se procesa la lista de objetos para agregar las nuevas filas.
            for (int i = 0; i < listAgents.size(); i++) {
                
                HSSFRow row = sheet.createRow(i + 5);
                listAgents.set(i, listAgents.get(i));
                String name = listAgents.get(i).getName();
                String lastName = listAgents.get(i).getLastName();
                String id = listAgents.get(i).getId();
                String phoneNumber = listAgents.get(i).getPhoneNumber();
                int code = listAgents.get(i).getCode();
                String position = listAgents.get(i).getPosition();

                row.createCell(0).setCellValue(name);
                row.createCell(1).setCellValue(lastName);
                row.createCell(2).setCellValue(id);
                row.createCell(3).setCellValue(phoneNumber);
                row.createCell(4).setCellValue(code);
                row.createCell(5).setCellValue(position); 
            }

            //Autoajusta las columnas del excel.
            int columnNumber = 8;
            for (int i = 0; i <= columnNumber; i++) {
                sheet.autoSizeColumn(i);
            }

            FileOutputStream file;
            try {
                //Se crea un objeto nuevo para guardar el archivo.
                file = new FileOutputStream(nameFile + ".xls");
                book.write(file);
                file.close();

                JOptionPane.showMessageDialog(null, "La tabla: " + nameFile + " ha sido exportada exitosamente!");

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrmManage.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Se ha presentado un error creando el archivo: " + ex.getMessage());

            } catch (IOException ex) {
                Logger.getLogger(FrmManage.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Se ha presentado un error creando el archivo: " + ex.getMessage());
            }

        }

    }//GEN-LAST:event_ButtonExportAgentsActionPerformed

    private void ButtonExportClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExportClientsActionPerformed
        //Objeto que me pregunta que nombre le quiero poner al archivo y la ruta dónde deseo guardarlo.
        JFileChooser fileNameAndPath = new JFileChooser();
        fileNameAndPath.setDialogTitle("Especifique el nombre y la ruta del archivo a exportar");
        
        int selectUser = fileNameAndPath.showSaveDialog(rootPane);
        if (selectUser == JFileChooser.APPROVE_OPTION) {
            String nameFile = fileNameAndPath.getSelectedFile().getAbsolutePath();

            //Creación de libro de excel vacío por medio del objeto HSSFWorkbook.
            HSSFWorkbook book = new HSSFWorkbook();
            //A partir de la creación del libro, se crea la hoja de excel con el nombre "Clients".
            HSSFSheet sheet = book.createSheet();
            book.setSheetName(0, "Reporte de clientes");
            
            //Estilos del titulo del reporte.
            CellStyle titleStyle = book.createCellStyle();
            titleStyle.setAlignment(HorizontalAlignment.CENTER);
            titleStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            HSSFFont titleFont = book.createFont();
            titleFont.setFontName("Arial");
            titleFont.setBold(true);
            titleFont.setFontHeightInPoints((short) 12);
            titleStyle.setFont(titleFont);
            
            Row titleRow = sheet.createRow(1);
            Cell titleCell = titleRow.createCell(1);
            titleCell.setCellStyle(titleStyle);
            titleCell.setCellValue("REPORTE DE CLIENTES");
            
            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 7));

            //Se asigna el nombre de los encabezados (campos) que aparecerán en la hoja de excel.
            String[] headers = new String[]{"NOMBRE", "APELLIDO", "CÉDULA", "DIRECCIÓN", "TELÉFONO", "EMAIL", "PASAPORTE", "TIPO", "CÓDIGO"};

            //Estilos de los encabezados del reporte.
            CellStyle headerCellStyle = book.createCellStyle();
            headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
            headerCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            headerCellStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            HSSFFont font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerCellStyle.setFont(font);

            //Se procesan los encabezados para agregarlos en una fila.
            HSSFRow headersFRow = sheet.createRow(4);
            for (int i = 0; i < headers.length; i++) {
                String header = headers[i];
                HSSFCell cell = headersFRow.createCell(i);
                cell.setCellStyle(headerCellStyle);
                cell.setCellValue(header);
            }

            //Se procesa la lista de objetos para agregar las nuevas filas.
            for (int i = 0; i < listClients.size(); i++) {
                
                HSSFRow row = sheet.createRow(i + 5);
                String name = listClients.get(i).getName();
                String lastName = listClients.get(i).getLastName();
                String id = listClients.get(i).getId();
                String address = listClients.get(i).getAddress();
                String phoneNumber = listClients.get(i).getPhoneNumber();
                String email = listClients.get(i).getEmail();
                String passport = listClients.get(i).getPassport();
                String type = listClients.get(i).getType();
                int code = listClients.get(i).getCode();

                row.createCell(0).setCellValue(name);
                row.createCell(1).setCellValue(lastName);
                row.createCell(2).setCellValue(id);
                row.createCell(3).setCellValue(address);
                row.createCell(4).setCellValue(phoneNumber);
                row.createCell(5).setCellValue(email);
                row.createCell(6).setCellValue(passport);
                row.createCell(7).setCellValue(type);
                row.createCell(8).setCellValue(code);
            }

            //Autoajusta las columnas del excel.
            int columnNumber = 8;
            for (int i = 0; i <= columnNumber; i++) {
                sheet.autoSizeColumn(i);
            }

            FileOutputStream file;
            try {
                //Se crea un objeto nuevo para guardar el archivo.
                file = new FileOutputStream(nameFile + ".xls");
                book.write(file);
                file.close();

                JOptionPane.showMessageDialog(null, "La tabla: " + nameFile + " ha sido exportada exitosamente!");

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrmManage.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Se ha presentado un error creando el archivo: " + ex.getMessage());

            } catch (IOException ex) {
                Logger.getLogger(FrmManage.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Se ha presentado un error creando el archivo: " + ex.getMessage());
            }

        }

    }//GEN-LAST:event_ButtonExportClientsActionPerformed

    private void ButtonExportFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExportFlightsActionPerformed
        //Objeto que me pregunta que nombre le quiero poner al archivo y la ruta dónde deseo guardarlo.
        JFileChooser fileNameAndPath = new JFileChooser();
        fileNameAndPath.setDialogTitle("Especifique el nombre y la ruta del archivo a exportar");
        
        int selectUser = fileNameAndPath.showSaveDialog(rootPane);
        if (selectUser == JFileChooser.APPROVE_OPTION) {
            String nameFile = fileNameAndPath.getSelectedFile().getAbsolutePath();

            //Creación de libro de excel vacío por medio del objeto HSSFWorkbook.
            HSSFWorkbook book = new HSSFWorkbook();
            //A partir de la creación del libro, se crea la hoja de excel con el nombre "Flights".
            HSSFSheet sheet = book.createSheet();
            book.setSheetName(0, "Reporte de vuelos");
            
            //Estilos del titulo del reporte.
            CellStyle titleStyle = book.createCellStyle();
            titleStyle.setAlignment(HorizontalAlignment.CENTER);
            titleStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            HSSFFont titleFont = book.createFont();
            titleFont.setFontName("Arial");
            titleFont.setBold(true);
            titleFont.setFontHeightInPoints((short) 12);
            titleStyle.setFont(titleFont);
            
            Row titleRow = sheet.createRow(1);
            Cell titleCell = titleRow.createCell(1);
            titleCell.setCellStyle(titleStyle);
            titleCell.setCellValue("REPORTE DE VUELOS");
            
            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 4));

            //Se asigna el nombre de los encabezados (campos) que aparecerán en la hoja de excel.
            String[] headers = new String[]{"ORIGEN", "DESTINO", "TIPO", "HORA DE SALIDA", "HORA DE LLEGADA", "CÓDIGO"};

            //Estilos de los encabezados del reporte.
            CellStyle headerCellStyle = book.createCellStyle();
            headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
            headerCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            headerCellStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            HSSFFont font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerCellStyle.setFont(font);

            //Se procesan los encabezados para agregarlos en una fila.
            HSSFRow headersFRow = sheet.createRow(4);
            for (int i = 0; i < headers.length; i++) {
                String header = headers[i];
                HSSFCell cell = headersFRow.createCell(i);
                cell.setCellStyle(headerCellStyle);
                cell.setCellValue(header);
            }

            //Se procesa la lista de objetos para agregar las nuevas filas.
            for (int i = 0; i < listFlights.size(); i++) {
                HSSFRow row = sheet.createRow(i + 5);
                String origin = listFlights.get(i).getOrigin();
                String destination = listFlights.get(i).getDestination();
                String type = listFlights.get(i).getType();
                String departureTime = listFlights.get(i).getDepartureTime();
                String arrivalTime = listFlights.get(i).getArrivalTime();
                String code = listFlights.get(i).getCode();

                row.createCell(0).setCellValue(origin);
                row.createCell(1).setCellValue(destination);
                row.createCell(2).setCellValue(type);
                row.createCell(3).setCellValue(departureTime);
                row.createCell(4).setCellValue(arrivalTime);
                row.createCell(5).setCellValue(code);
            }

            //Autoajusta las columnas del excel.
            int columnNumber = 8;
            for (int i = 0; i <= columnNumber; i++) {
                sheet.autoSizeColumn(i);
            }

            FileOutputStream file;
            try {
                //Se crea un objeto nuevo para guardar el archivo.
                file = new FileOutputStream(nameFile + ".xls");
                book.write(file);
                file.close();

                JOptionPane.showMessageDialog(null, "La tabla: " + nameFile + " ha sido exportada exitosamente!");

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrmManage.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Se ha presentado un error creando el archivo: " + ex.getMessage());

            } catch (IOException ex) {
                Logger.getLogger(FrmManage.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Se ha presentado un error creando el archivo: " + ex.getMessage());
            }

        }

    }//GEN-LAST:event_ButtonExportFlightsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmManage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCreateAgent;
    private javax.swing.JButton ButtonCreateClient;
    private javax.swing.JButton ButtonCreateFlight;
    private javax.swing.JButton ButtonDeleteAgent;
    private javax.swing.JButton ButtonDeleteClient;
    private javax.swing.JButton ButtonDeleteFlight;
    private javax.swing.JButton ButtonExportAgents;
    private javax.swing.JButton ButtonExportClients;
    private javax.swing.JButton ButtonExportFlights;
    private javax.swing.JButton ButtonSearchAgent;
    private javax.swing.JButton ButtonSearchClient;
    private javax.swing.JButton ButtonSearchFlight;
    private javax.swing.JButton ButtonUpdateAgent;
    private javax.swing.JButton ButtonUpdateClient;
    private javax.swing.JButton ButtonUpdateFlight;
    private javax.swing.JTabbedPane JTabbedPane;
    private javax.swing.JPanel PanelGraphicClients;
    private javax.swing.JPanel PanelGraphicFlights;
    private javax.swing.JPanel PanelGraphicPersons;
    private javax.swing.JPanel PanelManageAgents;
    private javax.swing.JPanel PanelManageClients;
    private javax.swing.JPanel PanelManageFlights;
    private javax.swing.JComboBox<String> cmbxPosition;
    private javax.swing.JComboBox<String> cmbxType;
    private javax.swing.JComboBox<String> cmbxTypeFlight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel labelQuantityAgents;
    private javax.swing.JLabel labelQuantityClients;
    private javax.swing.JLabel labelQuantityFlights;
    private javax.swing.JTable tableAgent;
    private javax.swing.JTable tableClient;
    private javax.swing.JTable tableFlight;
    private javax.swing.JTextField txtAddressClient;
    private javax.swing.JTextField txtArrivalTimeFlight;
    private javax.swing.JTextField txtCodeAgent;
    private javax.swing.JTextField txtCodeClient;
    private javax.swing.JTextField txtCodeFlight;
    private javax.swing.JTextField txtDepartureTimeFlight;
    private javax.swing.JTextField txtDestinationFlight;
    private javax.swing.JTextField txtEmailClient;
    private javax.swing.JTextField txtIdAgent;
    private javax.swing.JTextField txtIdClient;
    private javax.swing.JTextField txtLastNameAgent;
    private javax.swing.JTextField txtLastNameClient;
    private javax.swing.JTextField txtNameAgent;
    private javax.swing.JTextField txtNameClient;
    private javax.swing.JTextField txtOriginFlight;
    private javax.swing.JTextField txtPassportClient;
    private javax.swing.JTextField txtPhoneNumberAgent;
    private javax.swing.JTextField txtPhoneNumberClient;
    // End of variables declaration//GEN-END:variables
}

